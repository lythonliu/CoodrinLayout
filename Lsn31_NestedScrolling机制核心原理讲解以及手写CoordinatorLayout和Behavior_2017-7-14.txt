课题：NestedScrolling机制核心原理讲解以及手写CoordinatorLayout和Behavior


CoordinatorLayout  源码 

事件分发  ---》 NestedScrolling机制



自定义View 非常简单


1

LayoutInflater 监听布局创建过程



app:layout_behavior=“”
父容器   
LayoutParamets

ViewGroup   generateLayoutParams(AttributeSet attrs)  调用


自定义LayoutParams中
        mBehaviorResolved = a.hasValue(
                    R.styleable.CoordinatorLayout_Layout_layout_behavior);

					
CoordinatorLayout作为“super-powered FrameLayout”基本实现两个功能： 
1、作为顶层布局 
2、调度协调子布局 


CoordinatorLayout有两个主要的用法: 
1. 作为顶层应用的装饰或者chrome的布局； 
2. 作为一个能响应特定的一个或多个子视图交互的容器。

事件分发

Behavior   交警的指挥棒   十字路口 过往的车辆
手势定义了这一些 谁能够 走  谁需要等待   的作用


Behavior作为一个中间者，目的是协调 子控件之间的触摸事件，

哪些事件需要关心的呢

全局视图改变事件  滑动事件


down  事件

move 事件

如果子控件包含滑动控件  那又复杂一些了

开始滑动事件

停止滑动事件

快速滑动事件





NestedScrolling机制




Behavior

Android事件分发机制
主要是有是三个函数：
dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。


这种分发机制有一个漏洞：
如果子view获得处理touch事件机会的时候，

父view就再也没有机会去处理这个touch事件能力，当前触摸事件  更父容器没有半毛钱关系
事件分发是这样的：子View首先得到事件处理权，处理过程中，父View可以对其拦截，但是拦截了以后就无法再还给子View（本次手势内）。




直到下一次手指再按下。
NestedScrolling机制是这样的：内部View在滚动的时候，
首先将dx,dy交给NestedScrollingParent，NestedScrollingParent可对其进行部分消耗
，剩余的部分还给内部View。


CoordinatorLayout+AppBarLayout  +CosllapsingLayout+  Toolbar


NestedScrolling机制主要和NestedScrollingParent有关，看源码：
NestedScrollingChild
NestedScrollingParent
NestedScrollingChildHelper
NestedScrollingParentHelper


public interface NestedScrollingParent {

onStartNestedScroll.当子view的调用NestedScrollingChild的方法startNestedScroll时,会调用该方法.
一定要按照自己的需求返回true，该方法决定了当前控件是否能接收到其内部View(非并非是直接子View)滑动时的参数
；假设你只涉及到纵向滑动，这里可以根据nestedScrollAxes这个参数，
进行纵向判断。
      // 参数child:ViewParent包含触发嵌套滚动的view的对象
      // 参数target:触发嵌套滚动的view  (在这里如果不涉及多层嵌套的话,child和target)是相同的
      // 参数nestedScrollAxes:就是嵌套滚动的滚动方向了
  public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes);

onNestedScrollAccepted.如果onStartNestedScroll方法返回的是true的话,那么紧接着就会调用该方法.
它是让嵌套滚动在开始滚动之前,让布局容器(viewGroup)或者它的父类执行一些配置的初始化的.
    public void onNestedScrollAccepted(View child, View target, int nestedScrollAxes);


停止滚动了,当子view调用stopNestedScroll时会调用该方法.
    public void onStopNestedScroll(View target);

当子view调用dispatchNestedPreScroll方法是,会调用该方法.
该方法的会传入内部View移动的dx,dy，如果你需要消耗一定的dx,dy，就通过最后一个参数
consumed进行指定，例如我要消耗一半的dy，就可以写consumed[1]=dy/2
    // 参数target:同上
    // 参数dxConsumed:表示target已经消费的x方向的距离
    // 参数dyConsumed:表示target已经消费的x方向的距离
    // 参数dxUnconsumed:表示x方向剩下的滑动距离
    // 参数dyUnconsumed:表示y方向剩下的滑动距离
    public void onNestedScroll(View target, int dxConsumed, int dyConsumed,
            int dxUnconsumed, int dyUnconsumed);

    // 参数dx:表示target本次滚动产生的x方向的滚动总距离
    // 参数dy:表示target本次滚动产生的y方向的滚动总距离
    // 参数consumed:表示父布局要消费的滚动距离,consumed[0]和consumed[1]分别表示父布局在x和y方向上消费的距离.
    public void onNestedPreScroll(View target, int dx, int dy, int[] consumed);

onNestedFling你可以捕获对内部View的fling事件，如果return true则表示拦截掉内部View的事件







